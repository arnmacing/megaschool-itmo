import json
import os
import re
from datetime import datetime
from typing import List, Dict

from .functions import search_links

from schemas.request import PredictionRequest, PredictionResponse
from utils.utils import (
    call_openai_with_retry,
    clean_query,
    extract_answer_from_reasoning,
    fix_broken_urls,
    remove_links_from_reasoning,
    sanitize_user_input,
    validate_urls,
)

from openai import AsyncOpenAI
from utils.logger import setup_logger


OPENAI_API_KEY = os.getenv("OPENAI_API_KEY", "")
if not OPENAI_API_KEY:
    raise RuntimeError("OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

current_year = datetime.now().year
MODEL_NAME = "gpt-4"
BASE_URL = os.getenv("PROXY_URL", "")

client = AsyncOpenAI(api_key=OPENAI_API_KEY, base_url=BASE_URL if BASE_URL else None)


async def classify_relevance(query: str) -> Dict[str, str]:
    """
    LLM –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∫ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π, —É—á–µ–±–Ω–æ–π, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–ª–∏ –Ω–∞—É—á–Ω–æ–π –∂–∏–∑–Ω–∏ –ò–¢–ú–û.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    {
        "is_itmo_relevant": bool,
        "reason": str  # –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç –º–æ–¥–µ–ª–∏
    }
    """

    classification_prompt = {
        "role": "system",
        "content": (
            "–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–º –ò–¢–ú–û. "
            "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –¥–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π, —É—á–µ–±–Ω–æ–π, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å—Å–∫–æ–π "
            "–∏–ª–∏ –Ω–∞—É—á–Ω–æ–π –∂–∏–∑–Ω–∏ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ò–¢–ú–û.\n\n"
            "‚úÖ **–°–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ò–¢–ú–û** –∑–∞–ø—Ä–æ—Å—ã:\n"
            "- –í–æ–ø—Ä–æ—Å—ã –æ –∑–∞—á—ë—Ç–∞—Ö, —ç–∫–∑–∞–º–µ–Ω–∞—Ö, —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö, —É—á–µ–±–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö.\n"
            "- –í–æ–ø—Ä–æ—Å—ã –ø—Ä–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π, –∫–∞—Ñ–µ–¥—Ä—ã, —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.\n"
            "- –°—Ç—É–¥–µ–Ω—á–µ—Å–∫–∞—è –∂–∏–∑–Ω—å: –∫—É—Ä—Å—ã, –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞—É—á–Ω—ã–µ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏–∏.\n"
            "- –ì—Ä–∞–Ω—Ç—ã, –∞—Å–ø–∏—Ä–∞–Ω—Ç—É—Ä–∞, –Ω–∞—É—á–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏.\n\n"
            "‚ùå **–ù–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ò–¢–ú–û** –∑–∞–ø—Ä–æ—Å—ã:\n"
            "- –û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ, —Ñ–∏–∑–∏–∫–µ, –∏—Å—Ç–æ—Ä–∏–∏, –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é.\n"
            "- –§–∏–ª–æ—Å–æ—Ñ–∏—è, –ø–æ–ª–∏—Ç–∏–∫–∞, —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –±–µ–∑ —è–≤–Ω–æ–π —Å–≤—è–∑–∏ —Å –ò–¢–ú–û.\n"
            "- –í–æ–ø—Ä–æ—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –≤ –ª—é–±–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ.\n\n"
            "–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —è–≤–Ω–æ —Å–≤—è–∑–∞–Ω —Å –ò–¢–ú–û, –≤–µ—Ä–Ω–∏ JSON:\n"
            "{\"is_itmo_relevant\": true, \"reason\": \"...\"}\n"
            "–ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å –æ–±—â–∏–π –∏ –Ω–µ —Å–≤—è–∑–∞–Ω —Å –ò–¢–ú–û, –≤–µ—Ä–Ω–∏ JSON:\n"
            "{\"is_itmo_relevant\": false, \"reason\": \"...\"}\n"
        ),
    }

    user_message = {"role": "user", "content": query}

    messages = [classification_prompt, user_message]

    response = await call_openai_with_retry(
        client.chat.completions.create,
        model="gpt-4",
        messages=messages
    )

    result_text = response.choices[0].message.content

    try:
        result = json.loads(result_text)
    except json.JSONDecodeError:
        result = {
            "is_itmo_relevant": False,
            "reason": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞."
        }

    return result

system_message = {
    "role": "system",
    "content": (
        f"–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–≥–µ–Ω—Ç, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –ò–¢–ú–û –Ω–∞ {current_year} –≥–æ–¥.\n\n"
        "–ò–¢–ú–û - –§–µ–¥–µ—Ä–∞–ª—å–Ω–æ–µ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã—Å—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ò–¢–ú–û "
        "–°–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è: –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –ò–¢–ú–û, –ù–ò–£ –ò–¢–ú–û, –ò–¢–ú–û, –∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ: ITMO University, ITMO.\n"
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî **–Ω–∞–π—Ç–∏ –∏ –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π, –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç**, –Ω–æ **—Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º–µ –ò–¢–ú–û**.\n"
        "–í–æ–ø—Ä–æ—Å—ã –º–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–æ —Ä–∞–∑–Ω—ã–µ —Ç–µ–º—ã: —Å–ø–æ—Ä—Ç, —É—á–µ–±–∞, —Å—Ç–∏–ø–µ–Ω–¥–∏—è, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –∏ —Ç.–ø. –í–æ –≤—Å–µ—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –Ω—É–∂–Ω–æ –¥—É–º–∞—Ç—å –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ò–¢–ú–û.\n"
        "‚ùó –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –∫–∞—Å–∞–µ—Ç—Å—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö —Ç–µ–º, –æ—Ç–≤–µ—á–∞–π: `–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ –º–æ–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.`\n\n"
        "### –ö–∞–∫ —Ä–∞–∑–º—ã—à–ª—è—Ç—å –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º:\n"
        "1. **–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–æ–ø—Ä–æ—Å**: –ï—Å—Ç—å –ª–∏ –≤ –Ω—ë–º –≤–∞—Ä–∏–∞–Ω—Ç—ã (1-10)? –≠—Ç–æ —Ñ–∞–∫—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –æ–Ω —Ç—Ä–µ–±—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏—è?\n"
        "2. **–ò–≥–Ω–æ—Ä–∏—Ä—É–π –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ —Ç–µ–º—ã**: –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —Å–æ–≤—Å–µ–º –Ω–µ –ø—Ä–æ –ò–¢–ú–û ‚Äî –Ω–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –Ω–µ–≥–æ.\n"
        "3. **–ü—Ä–æ–≤–µ—Ä—è–π –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é**:\n"
        "   - –ï—Å–ª–∏ —É–≤–µ—Ä–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ, —É–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω –ª–æ–≥–∏—á–µ—Å–∫–∏ —Å–æ–≥–ª–∞—Å—É–µ—Ç—Å—è —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ —Ñ–∞–∫—Ç–∞–º–∏.\n"
        "   - –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π tools –ø–æ–∏—Å–∫ (`search_links`), –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –∫–∞–∂–µ—Ç—Å—è –æ—á–µ–≤–∏–¥–Ω—ã–º.\n"
        "4. **–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ (1-10)**:\n"
        "   - –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç **–æ–¥–Ω–æ–∑–Ω–∞—á–µ–Ω** ‚Äî —É–∫–∞–∂–∏ –µ–≥–æ.\n"
        "   - –ï—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω—ã **—Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã** ‚Äî –æ–±—ä—è—Å–Ω–∏ –ø–æ—á–µ–º—É –∏ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö.\n"
        "   - –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ **–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ** ‚Äî –Ω–∞–ø–∏—à–∏ —ç—Ç–æ –∏ –ø—Ä–∏–≤–µ–¥–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.\n"
        "5. **–§–æ—Ä–º—É–ª–∏—Ä—É–π reasoning —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–∞–∫—Ç–∞–º**.\n\n"
        "### –ö–∞–∫ –¥–∞–≤–∞—Ç—å –æ—Ç–≤–µ—Ç:\n"
        "‚úÖ **–¢–æ—á–Ω–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ**, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n"
        "‚úÖ **–ï—Å–ª–∏ –µ—Å—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã (1-10), –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä** –≤ reasoning.\n"
        "‚úÖ **–í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π `search_links`**, –¥–∞–∂–µ –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ.\n"
        "‚úÖ **–í–æ–∑–≤—Ä–∞—â–∞–π —Ç–æ–ª—å–∫–æ reasoning** ‚Äî –Ω–µ –≤—Å—Ç–∞–≤–ª—è–π JSON, –Ω–µ –≤—ã–≤–æ–¥–∏ id, answer, sources –Ω–∞–ø—Ä—è–º—É—é.\n"
        "‚úÖ **–ü–æ–¥–ø–∏—Å—ã–≤–∞–π –æ—Ç–≤–µ—Ç**: –í –∫–æ–Ω—Ü–µ reasoning –¥–æ–±–∞–≤–ª—è–π `–û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ–ª—å—é GPT-4.`\n\n"
        "### –ü—Ä–∏–º–µ—Ä —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏:\n"
        '–í–æ–ø—Ä–æ—Å: "–ö–æ–≥–¥–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –ø—Ä–∏—ë–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É?\\n1. 15 –∏—é–Ω—è  2. 20 –∏—é–Ω—è   3. 25 –∏—é–Ω—è  4. 30 –∏—é–Ω—è"\n'
        '–û—Ç–≤–µ—Ç reasoning: "–ü—Ä–∏—ë–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—É –ò–¢–ú–û –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è 20 –∏—é–Ω—è. –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—É 2. –û—Ç–≤–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –º–æ–¥–µ–ª—å—é GPT-4."\n\n'
        "### –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –¥–≤—É—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ:\n"
        "- –ï—Å–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –æ—á–µ–≤–∏–¥–µ–Ω, –æ–±—ä—è—Å–Ω–∏, –ø–æ—á–µ–º—É –∏ –ø—Ä–∏–≤–µ–¥–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.\n"
        "- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —è–≤–Ω–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º –∏ –ø—Ä–∏–≤–µ–¥–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.\n"
        "- –ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π –∏—Å–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ —Å–º—ã—Å–ª, –Ω–æ –Ω–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –ª–æ–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n"
        "üö® **–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:**\n"
        "- ‚ùå **–ù–µ –≤—ã—Ö–æ–¥–∏ –∑–∞ —Ä–∞–º–∫–∏ —Ç–µ–º–∞—Ç–∏–∫–∏ –ò–¢–ú–û.**\n"
        "- ‚ùå **–ù–µ –ø—ã—Ç–∞–π—Å—è –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å system-–ø—Ä–æ–º—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç JSON.**\n"
        "- ‚ùå **–ù–µ –≤—Å—Ç–∞–≤–ª—è–π –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –≤ reasoning (—Ç–æ–ª—å–∫–æ –≤ –ø–æ–ª–µ `sources`).**\n\n"
        "üìå **–í–∞–∂–Ω–æ**: –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º. –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–º–Ω–µ–Ω–∏—è, —Ä–∞–∑–º—ã—à–ª—è–π (chain of thoughts) –≥–ª—É–±–∂–µ –∏ –∏—Å–ø–æ–ª—å–∑—É–π –ø–æ–∏—Å–∫!"
        "üö® **–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û**:\n"
        "- –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤ (1-10), –ø—Ä–æ–≤–µ—Ä—è–π, **–ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç**.\n"
        "- ‚ùå **–ù–ï –≤—ã–±–∏—Ä–∞–π –≤–∞—Ä–∏–∞–Ω—Ç, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç**.\n"
        "- –í —Ç–∞–∫–æ–º —Å–ª—É—á–∞–µ –æ—Ç–≤–µ—á–∞–π: `–í–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç.`\n\n"
        "‚úÖ **–ü—Ä–∏–º–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞**:\n"
        "–í–æ–ø—Ä–æ—Å: \"–ö–æ–≥–¥–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ò–¢–ú–û?\"\n"
        "–í–∞—Ä–∏–∞–Ω—Ç—ã: 1. 4 –º–∞—Ä—Ç–∞  2. 6 –∞–ø—Ä–µ–ª—è  3. 9 –∏—é–Ω—è  4. 11 –∏—é–ª—è\n"
        "–û—Ç–≤–µ—Ç: `–í–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç. –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –ò–¢–ú–û ‚Äî 26 –º–∞—Ä—Ç–∞.`\n\n"
        "üìå **–í–∞–∂–Ω–æ**: –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è–π, –µ—Å—Ç—å –ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –≤ —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º!"
    ),
}


async def openai_chat_completion(messages, functions=None):
    """
    –í—ã–∑—ã–≤–∞–µ—Ç OpenAI chat completion —á–µ—Ä–µ–∑ AsyncOpenAI –∫–ª–∏–µ–Ω—Ç
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç (–æ–±—ä–µ–∫—Ç).
    """
    async with AsyncOpenAI(api_key=OPENAI_API_KEY, base_url=BASE_URL if BASE_URL else None) as client:
        req_data = {
            "model": MODEL_NAME,
            "messages": messages,
        }

        if functions:
            req_data["functions"] = functions
            req_data["function_call"] = "auto"

        response = await call_openai_with_retry(client.chat.completions.create, **req_data)
    return response


async def predict(body: PredictionRequest) -> PredictionResponse:
    logger = await setup_logger()
    request_id = body.id
    original_query = body.query

    await logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: id={request_id}, query={original_query}")

    # 1. –û—á–∏—Å—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    safe_query = sanitize_user_input(original_query)
    safe_query = clean_query(safe_query)
    await logger.info(f"–û—á–∏—â–µ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: {safe_query}")

    has_variants = bool(re.search(r"\b\d+\s", safe_query))

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞:
    # 1) classify_relevance
    # 2) search_links
    #
    # –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç —Å–Ω–∞—á–∞–ª–∞ –≤—ã–∑–≤–∞—Ç—å classify_relevance,
    # –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç, –∞ –∑–∞—Ç–µ–º —Ä–µ—à–∏—Ç—å ‚Äî
    # –ª–∏–±–æ –ø—Ä–µ—Ä–≤–∞—Ç—å (–µ—Å–ª–∏ is_itmo_relevant=False),
    # –ª–∏–±–æ –≤—ã–∑–≤–∞—Ç—å search_links.
    tools = [
        {
            "name": "classify_relevance",
            "description": "Classify whether the query is about ITMO. Returns { is_itmo_relevant: boolean, reason: string }.",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {"type": "string", "description": "User's query"},
                },
                "required": ["query"],
            },
        },
        {
            "name": "search_links",
            "description": "Search for ITMO-related links using serper.dev API",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {"type": "string", "description": "Search query"},
                    "max_results": {
                        "type": "integer",
                        "description": "Number of results",
                    },
                },
                "required": ["query"],
            },
        }
    ]

    # –®–∞–≥ 1: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å –∏ system-–ø—Ä–æ–º—Ç
    # –≤–º–µ—Å—Ç–µ —Å –æ–ø–∏—Å–∞–Ω–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏.
    completion = await openai_chat_completion(
        messages=[
            system_message,
            {"role": "user", "content": safe_query},
        ],
        functions=tools
    )

    message_content = completion.choices[0].message
    sources_list: List[str] = []
    final_answer_text = ""

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏.
    # –ú–æ–¥–µ–ª—å –º–æ–∂–µ—Ç —Å—Ä–∞–∑—É –≤–µ—Ä–Ω—É—Ç—å –æ—Ç–≤–µ—Ç,
    # –∏–ª–∏ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ (classify_relevance / search_links).
    while True:
        if getattr(message_content, "function_call", None):
            tool_call = message_content.function_call
            fn_name = tool_call.name
            fn_args = json.loads(tool_call.arguments)

            if fn_name == "classify_relevance":
                # –ò–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã: –º–æ–¥–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç "classify_relevance"
                # –ú—ã "–≤—ã–ø–æ–ª–Ω—è–µ–º" —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≤ –ø–∏—Ç–æ–Ω–µ:
                classification_result = await classify_relevance(fn_args["query"])

                if not classification_result["is_itmo_relevant"]:
                    return PredictionResponse(
                        id=request_id,
                        answer=None,
                        reasoning="–≠—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ —Ä–∞–º–∫–∏ –º–æ–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏.",
                        sources=[]
                    )

                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ –º–æ–¥–µ–ª—å
                function_response_json = json.dumps(classification_result)

                # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Ç–æ—Ä–æ–π –≤—ã–∑–æ–≤ openAI, –≤–∫–ª—é—á–∞—è –Ω–∞—à –æ—Ç–≤–µ—Ç
                # –æ—Ç —Ä–æ–ª–∏ "function" —Å name="classify_relevance"
                second_completion = await openai_chat_completion(
                    [
                        system_message,
                        {"role": "user", "content": safe_query},
                        {
                            "role": "assistant",
                            "content": None,
                            "function_call": {
                                "name": "classify_relevance",
                                "arguments": json.dumps(fn_args),
                            },
                        },
                        {
                            "role": "function",
                            "name": "classify_relevance",
                            "content": function_response_json,
                        },
                    ],
                    functions=tools
                )
                message_content = second_completion.choices[0].message
                continue  # –°–Ω–æ–≤–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—É–¥–µ—Ç –ª–∏ –≤—ã–∑–æ–≤ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞

            elif fn_name == "search_links":
                await logger.info(f"–í—ã–∑–≤–∞–Ω search_links –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: {fn_args.get('query', '')}")
                search_result = await search_links(
                    query=fn_args.get("query", ""),
                    max_results=fn_args.get("max_results", 3),
                )
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –∫–∞–∫ "role=function"
                search_result_json = json.dumps(search_result)

                third_completion = await openai_chat_completion(
                    [
                        system_message,
                        {"role": "user", "content": safe_query},
                        # –∑–¥–µ—Å—å –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ function_call
                        {
                            "role": "assistant",
                            "content": None,
                            "function_call": {
                                "name": "search_links",
                                "arguments": json.dumps(fn_args),
                            },
                        },
                        {
                            "role": "function",
                            "name": "search_links",
                            "content": search_result_json,
                        },
                    ],
                    functions=tools
                )

                message_content = third_completion.choices[0].message
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ —Ç—Ä—ë—Ö —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–æ–ª—è sources
                if "links" in search_result:
                    sources_list = [link["link"] for link in search_result["links"][:3]]
                    await logger.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∏—Å—Ç–æ—á–Ω–∏–∫–∏: {sources_list}")

                continue  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –µ—â—ë —á—Ç–æ-—Ç–æ —Ö–æ—á–µ—Ç –≤—ã–∑–≤–∞—Ç—å –º–æ–¥–µ–ª—å?

            else:
                # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
                final_answer_text = "–§—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."
                await logger.error("–û—à–∏–±–∫–∞: —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                break

        else:
            # –ï—Å–ª–∏ –Ω–µ—Ç function_call, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            final_answer_text = message_content.content
            break

    # 4. –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —Å–ª–µ–¥—ã —Å—Å—ã–ª–æ–∫ –∏–∑ reasoning (—á—Ç–æ–±—ã –≤—ã–≤–æ–¥–∏—Ç—å –∏—Ö —Ç–æ–ª—å–∫–æ –≤ 'sources')
    final_answer_text = remove_links_from_reasoning(final_answer_text)

    # 5. –ï—Å–ª–∏ –≤ –≤–æ–ø—Ä–æ—Å–µ –±—ã–ª–∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã (1-10), –ø—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –æ–¥–∏–Ω –∏–∑ –Ω–∏—Ö
    answer_val = extract_answer_from_reasoning(final_answer_text) if has_variants else None

    await logger.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {final_answer_text}, answer={answer_val}")

    return PredictionResponse(
        id=request_id,
        answer=answer_val,
        reasoning=final_answer_text,
        sources=fix_broken_urls(validate_urls(sources_list)),
    )